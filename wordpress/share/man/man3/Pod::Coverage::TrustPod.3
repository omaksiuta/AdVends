.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Pod::Coverage::TrustPod 3"
.TH Pod::Coverage::TrustPod 3 "2018-03-12" "perl v5.24.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Pod::Coverage::TrustPod \- allow a module's pod to contain Pod::Coverage hints
.SH "VERSION"
.IX Header "VERSION"
version 0.100005
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a Pod::Coverage subclass (actually, a subclass of
Pod::Coverage::CountParents) that allows the \s-1POD\s0 itself to declare certain
symbol names trusted.
.PP
Here is a sample Perl module:
.PP
.Vb 1
\&  package Foo::Bar;
\&
\&  =head1 NAME
\&
\&  Foo::Bar \- a bar at which fooes like to drink
\&
\&  =head1 METHODS
\&
\&  =head2 fee
\&
\&  returns the bar tab
\&
\&  =cut
\&
\&  sub fee { ... }
\&
\&  =head2 fie
\&
\&  scoffs at bar tab
\&
\&  =cut
\&
\&  sub fie { ... }
\&
\&  sub foo { ... }
\&
\&  =begin Pod::Coverage
\&
\&    foo
\&
\&  =end Pod::Coverage
\&
\&  =cut
.Ve
.PP
This file would report full coverage, because any non-empty lines inside a
block of \s-1POD\s0 targeted to Pod::Coverage are treated as \f(CW\*(C`trustme\*(C'\fR patterns.
Leading and trailing whitespace is stripped and the remainder is treated as a
regular expression anchored at both ends.
.PP
Remember, anywhere you could use \f(CW\*(C`=begin\*(C'\fR and \f(CW\*(C`=end\*(C'\fR as above, you could
instead write:
.PP
.Vb 1
\&  =for Pod::Coverage foo
.Ve
.PP
In some cases, you may wish to make the entire file trusted.  The special
pattern \f(CW\*(C`*EVERYTHING*\*(C'\fR may be provided to do just this.
.PP
Keep in mind that Pod::Coverage::TrustPod sets up exceptions using the \*(L"trust\*(R"
mechanism rather than the \*(L"privacy\*(R" mechanism in Pod::Coverage.  This is
unlikely ever to matter to you, but it's true.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ricardo \s-1SIGNES\s0 <rjbs@cpan.org>
.SH "CONTRIBUTOR"
.IX Header "CONTRIBUTOR"
Andreas Marienborg <andreas.marienborg@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2018 by Ricardo \s-1SIGNES.\s0
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
